{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/IToucanCarbonOffsets.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\nimport \"../types/CarbonProjectTypes.sol\";\nimport \"../types/CarbonProjectVintageTypes.sol\";\n\ninterface IToucanCarbonOffsets is IERC20Upgradeable, IERC721Receiver {\n    function getGlobalProjectVintageIdentifiers()\n        external\n        view\n        returns (string memory, string memory);\n\n    function getAttributes()\n        external\n        view\n        returns (ProjectData memory, VintageData memory);\n\n    function getRemaining() external view returns (uint256 remaining);\n\n    function getDepositCap() external view returns (uint256);\n\n    function retire(uint256 amount) external;\n\n    function retireFrom(address account, uint256 amount) external;\n\n    function mintCertificateLegacy(\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256 amount\n    ) external;\n\n    function retireAndMintCertificate(\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/interfaces/IToucanContractRegistry.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\ninterface IToucanContractRegistry {\n    function carbonOffsetBatchesAddress() external view returns (address);\n\n    function carbonProjectsAddress() external view returns (address);\n\n    function carbonProjectVintagesAddress() external view returns (address);\n\n    function toucanCarbonOffsetsFactoryAddress()\n        external\n        view\n        returns (address);\n\n    function carbonOffsetBadgesAddress() external view returns (address);\n\n    function checkERC20(address _address) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IToucanPoolToken.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IToucanPoolToken is IERC20Upgradeable {\n    function deposit(address erc20Addr, uint256 amount) external;\n\n    function checkEligible(address erc20Addr) external view returns (bool);\n\n    function checkAttributeMatching(address erc20Addr)\n        external\n        view\n        returns (bool);\n\n    function calculateRedeemFees(\n        address[] memory tco2s,\n        uint256[] memory amounts\n    ) external view returns (uint256);\n\n    function redeemMany(address[] memory tco2s, uint256[] memory amounts)\n        external;\n\n    function redeemAuto(uint256 amount) external;\n\n    function redeemAuto2(uint256 amount)\n        external\n        returns (address[] memory tco2s, uint256[] memory amounts);\n\n    function getRemaining() external view returns (uint256);\n\n    function getScoredTCO2s() external view returns (address[] memory);\n}\n"
    },
    "contracts/OffsetHelper.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"./OffsetHelperStorage.sol\";\nimport \"./interfaces/IToucanPoolToken.sol\";\nimport \"./interfaces/IToucanCarbonOffsets.sol\";\nimport \"./interfaces/IToucanContractRegistry.sol\";\n\n/**\n * @title Toucan Protocol Offset Helpers\n * @notice Helper functions that simplify the carbon offsetting (retirement)\n * process.\n *\n * Retiring carbon tokens requires multiple steps and interactions with\n * Toucan Protocol's main contracts:\n * 1. Obtain a Toucan pool token such as BCT or NCT (by performing a token\n *    swap).\n * 2. Redeem the pool token for a TCO2 token.\n * 3. Retire the TCO2 token.\n *\n * These steps are combined in each of the following \"auto offset\" methods\n * implemented in `OffsetHelper` to allow a retirement within one transaction:\n * - `autoOffsetPoolToken()` if the user already owns a Toucan pool\n *   token such as BCT or NCT,\n * - `autoOffsetExactOutETH()` if the user would like to perform a retirement\n *   using the native token e.g. CELO, specifying the exact amount of TCO2s to retire,\n * - `autoOffsetExactInETH()` if the user would like to perform a retirement\n *   using the native token e.g. CELO, swapping all sent native tokens into TCO2s,\n * - `autoOffsetExactOutToken()` if the user would like to perform a retirement\n *   using an ERC20 token (USDC, WETH or WMATIC), specifying the exact amount\n *   of TCO2s to retire,\n * - `autoOffsetExactInToken()` if the user would like to perform a retirement\n *   using an ERC20 token (USDC, WETH or WMATIC), specifying the exact amount\n *   of token to swap into TCO2s.\n *\n * In these methods, \"auto\" refers to the fact that these methods use\n * `autoRedeem()` in order to automatically choose a TCO2 token corresponding\n * to the oldest tokenized carbon project in the specfified token pool.\n * There are no fees incurred by the user when using `autoRedeem()`, i.e., the\n * user receives 1 TCO2 token for each pool token (BCT/NCT) redeemed.\n *\n * There are two `view` helper functions `calculateNeededETHAmount()` and\n * `calculateNeededTokenAmount()` that should be called before using\n * `autoOffsetExactOutETH()` and `autoOffsetExactOutToken()`, to determine how\n * much native token e.g. CELO, respectively how much of the ERC20 token must be sent to the\n * `OffsetHelper` contract in order to retire the specified amount of carbon.\n *\n * The two `view` helper functions `calculateExpectedPoolTokenForETH()` and\n * `calculateExpectedPoolTokenForToken()` can be used to calculate the\n * expected amount of TCO2s that will be offset using functions\n * `autoOffsetExactInETH()` and `autoOffsetExactInToken()`.\n */\ncontract OffsetHelper is OffsetHelperStorage {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Contract constructor. Should specify arrays of ERC20 symbols and\n     * addresses that can used by the contract.\n     *\n     * @dev See `isEligible()` for a list of tokens that can be used in the\n     * contract. These can be modified after deployment by the contract owner\n     * using `setEligibleTokenAddress()` and `deleteEligibleTokenAddress()`.\n     *\n     * @param _eligibleTokenSymbols A list of token symbols.\n     * @param _eligibleTokenAddresses A list of token addresses corresponding\n     * @param _baseToken Symbol of the token the DEX uses to change to pool tokens e.g., NCTs\n     * @param _baseERC20 Symbol of ERC20 token to get the current amount to swap\n     * to the provided token symbols.\n     */\n    constructor(\n        string[] memory _eligibleTokenSymbols,\n        address[] memory _eligibleTokenAddresses,\n        string memory _baseToken,\n        string memory _baseERC20\n    ) {\n        uint256 i = 0;\n        uint256 eligibleTokenSymbolsLen = _eligibleTokenSymbols.length;\n        while (i < eligibleTokenSymbolsLen) {\n            eligibleTokenAddresses[\n                _eligibleTokenSymbols[i]\n            ] = _eligibleTokenAddresses[i];\n            i += 1;\n        }\n        baseToken = _baseToken;\n        baseERC20 = _baseERC20;\n    }\n\n    /**\n     * @notice Emitted upon successful redemption of TCO2 tokens from a Toucan\n     * pool token such as BCT or NCT.\n     *\n     * @param who The sender of the transaction\n     * @param poolToken The address of the Toucan pool token used in the\n     * redemption, for example, NCT or BCT\n     * @param tco2s An array of the TCO2 addresses that were redeemed\n     * @param amounts An array of the amounts of each TCO2 that were redeemed\n     */\n    event Redeemed(\n        address who,\n        address poolToken,\n        address[] tco2s,\n        uint256[] amounts\n    );\n\n    modifier onlyRedeemable(address _token) {\n        require(isRedeemable(_token), \"Token not redeemable\");\n\n        _;\n    }\n\n    modifier onlySwappable(address _token) {\n        require(isSwappable(_token), \"Token not swappable\");\n\n        _;\n    }\n\n    /**\n     * @notice Retire carbon credits using the lowest quality (oldest) TCO2\n     * tokens available from the specified Toucan token pool by sending ERC20\n     * tokens (USDC, WETH, WMATIC). Use `calculateNeededTokenAmount` first in\n     * order to find out how much of the ERC20 token is required to retire the\n     * specified quantity of TCO2.\n     *\n     * This function:\n     * 1. Swaps the ERC20 token sent to the contract for the specified pool token.\n     * 2. Redeems the pool token for the poorest quality TCO2 tokens available.\n     * 3. Retires the TCO2 tokens.\n     *\n     * Note: The client must approve the ERC20 token that is sent to the contract.\n     *\n     * @dev When automatically redeeming pool tokens for the lowest quality\n     * TCO2s there are no fees and you receive exactly 1 TCO2 token for 1 pool\n     * token.\n     *\n     * @param _depositedToken The address of the ERC20 token that the user sends\n     * (must be one of USDC, WETH, WMATIC)\n     * @param _poolToken The address of the Toucan pool token that the\n     * user wants to use, for example, NCT or BCT\n     * @param _amountToOffset The amount of TCO2 to offset\n     *\n     * @return tco2s An array of the TCO2 addresses that were redeemed\n     * @return amounts An array of the amounts of each TCO2 that were redeemed\n     */\n    function autoOffsetExactOutToken(\n        address _depositedToken,\n        address _poolToken,\n        uint256 _amountToOffset,\n        address[] memory _customPath\n    ) public returns (address[] memory tco2s, uint256[] memory amounts) {\n        // swap input token for BCT / NCT\n        swapExactOutToken(\n            _depositedToken,\n            _poolToken,\n            _amountToOffset,\n            _customPath\n        );\n\n        // redeem BCT / NCT for TCO2s\n        (tco2s, amounts) = autoRedeem(_poolToken, _amountToOffset);\n\n        // retire the TCO2s to achieve offset\n        autoRetire(tco2s, amounts);\n    }\n\n    /**\n     * @notice Retire carbon credits using the lowest quality (oldest) TCO2\n     * tokens available from the specified Toucan token pool by sending ERC20\n     * tokens (USDC, WETH, WMATIC). All provided token is consumed for\n     * offsetting.\n     *\n     * This function:\n     * 1. Swaps the ERC20 token sent to the contract for the specified pool token.\n     * 2. Redeems the pool token for the poorest quality TCO2 tokens available.\n     * 3. Retires the TCO2 tokens.\n     *\n     * Note: The client must approve the ERC20 token that is sent to the contract.\n     *\n     * @dev When automatically redeeming pool tokens for the lowest quality\n     * TCO2s there are no fees and you receive exactly 1 TCO2 token for 1 pool\n     * token.\n     *\n     * @param _fromToken The address of the ERC20 token that the user sends\n     * (must be one of USDC, WETH, WMATIC)\n     * @param _amountToSwap The amount of ERC20 token to swap into Toucan pool\n     * token. Full amount will be used for offsetting.\n     * @param _poolToken The address of the Toucan pool token that the\n     * user wants to use, for example, NCT or BCT\n     *\n     * @return tco2s An array of the TCO2 addresses that were redeemed\n     * @return amounts An array of the amounts of each TCO2 that were redeemed\n     */\n    function autoOffsetExactInToken(\n        address _fromToken,\n        uint256 _amountToSwap,\n        address _poolToken,\n        address[] memory _customPath\n    ) public returns (address[] memory tco2s, uint256[] memory amounts) {\n        // swap input token for BCT / NCT\n        uint256 amountToOffset = swapExactInToken(\n            _fromToken,\n            _amountToSwap,\n            _poolToken,\n            _customPath\n        );\n\n        // redeem BCT / NCT for TCO2s\n        (tco2s, amounts) = autoRedeem(_poolToken, amountToOffset);\n\n        // retire the TCO2s to achieve offset\n        autoRetire(tco2s, amounts);\n    }\n\n    /**\n     * @notice Retire a specified amount of  carbon credits using the lowest quality (oldest) TCO2\n     * tokens available from the specified Toucan token pool by sending a native token e.g. CELO.\n     * Use `calculateNeededETHAmount()` first in order to find out how much\n     * of the native token e.g. CELO is required to retire the specified quantity of TCO2.\n     *\n     * This function:\n     * 1. Swaps the native token e.g. CELO sent to the contract for the specified pool token.\n     * 2. Redeems the pool token for the poorest quality TCO2 tokens available.\n     * 3. Retires the TCO2 tokens.\n     *\n     * @dev If the user sends much native token e.g. CELO, the leftover amount will be sent back\n     * to the user.\n     *\n     * @param _poolToken The address of the Toucan pool token that the\n     * user wants to use, for example, NCT or BCT.\n     * @param _amountToOffset The amount of TCO2 to offset.\n     *\n     * @return tco2s An array of the TCO2 addresses that were redeemed\n     * @return amounts An array of the amounts of each TCO2 that were redeemed\n     */\n    function autoOffsetExactOutETH(\n        address _poolToken,\n        uint256 _amountToOffset,\n        address[] memory _customPath\n    )\n        public\n        payable\n        returns (address[] memory tco2s, uint256[] memory amounts)\n    {\n        // swap the native token e.g. CELO for BCT / NCT\n        swapExactOutETH(_poolToken, _amountToOffset, _customPath);\n\n        // redeem BCT / NCT for TCO2s\n        (tco2s, amounts) = autoRedeem(_poolToken, _amountToOffset);\n\n        // retire the TCO2s to achieve offset\n        autoRetire(tco2s, amounts);\n    }\n\n    /**\n     * @notice Retire carbon credits using the lowest quality (oldest) TCO2\n     * tokens available from the specified Toucan token pool by sending a native token e.g. CELO.\n     * All provided native token e.g. CELO is consumed for offsetting.\n     *\n     * This function:\n     * 1. Swaps the native token e.g. CELO sent to the contract for the specified pool token.\n     * 2. Redeems the pool token for the poorest quality TCO2 tokens available.\n     * 3. Retires the TCO2 tokens.\n     *\n     * @param _poolToken The address of the Toucan pool token that the\n     * user wants to use, for example, NCT or BCT.\n     *\n     * @return tco2s An array of the TCO2 addresses that were redeemed\n     * @return amounts An array of the amounts of each TCO2 that were redeemed\n     */\n    function autoOffsetExactInETH(\n        address _poolToken,\n        address[] memory _customPath\n    )\n        public\n        payable\n        returns (address[] memory tco2s, uint256[] memory amounts)\n    {\n        // swap the native token e.g. CELO for BCT / NCT\n        uint256 amountToOffset = swapExactInETH(_poolToken, _customPath);\n\n        // redeem BCT / NCT for TCO2s\n        (tco2s, amounts) = autoRedeem(_poolToken, amountToOffset);\n\n        // retire the TCO2s to achieve offset\n        autoRetire(tco2s, amounts);\n    }\n\n    /**\n     * @notice Retire carbon credits using the lowest quality (oldest) TCO2\n     * tokens available by sending Toucan pool tokens, for example, BCT or NCT.\n     *\n     * This function:\n     * 1. Redeems the pool token for the poorest quality TCO2 tokens available.\n     * 2. Retires the TCO2 tokens.\n     *\n     * Note: The client must approve the pool token that is sent.\n     *\n     * @param _poolToken The address of the Toucan pool token that the\n     * user wants to use, for example, NCT or BCT.\n     * @param _amountToOffset The amount of TCO2 to offset.\n     *\n     * @return tco2s An array of the TCO2 addresses that were redeemed\n     * @return amounts An array of the amounts of each TCO2 that were redeemed\n     */\n    function autoOffsetPoolToken(\n        address _poolToken,\n        uint256 _amountToOffset\n    ) public returns (address[] memory tco2s, uint256[] memory amounts) {\n        // deposit pool token from user to this contract\n        deposit(_poolToken, _amountToOffset);\n\n        // redeem BCT / NCT for TCO2s\n        (tco2s, amounts) = autoRedeem(_poolToken, _amountToOffset);\n\n        // retire the TCO2s to achieve offset\n        autoRetire(tco2s, amounts);\n    }\n\n    /**\n     * @notice Checks whether an address can be used by the contract.\n     * @param _erc20Address address of the ERC20 token to be checked\n     * @return True if the address can be used by the contract\n     */\n    function isEligible(address _erc20Address) private view returns (bool) {\n        bool isToucanContract = IToucanContractRegistry(contractRegistryAddress)\n            .checkERC20(_erc20Address);\n        if (isToucanContract) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"BCT\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"NCT\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"USDC\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"WETH\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"WMATIC\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"mcUSD\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"cUSD\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"CELO\"]) return true;\n        return false;\n    }\n\n    /**\n     * @notice Checks whether an address can be used in a token swap\n     * @param _erc20Address address of token to be checked\n     * @return True if the specified address can be used in a swap\n     */\n    function isSwappable(address _erc20Address) private view returns (bool) {\n        if (_erc20Address == eligibleTokenAddresses[\"USDC\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"WETH\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"WMATIC\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"mcUSD\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"cUSD\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"CELO\"]) return true;\n        return false;\n    }\n\n    /**\n     * @notice Checks whether an address is a Toucan pool token address\n     * @param _erc20Address address of token to be checked\n     * @return True if the address is a Toucan pool token address\n     */\n    function isRedeemable(address _erc20Address) private view returns (bool) {\n        if (_erc20Address == eligibleTokenAddresses[\"BCT\"]) return true;\n        if (_erc20Address == eligibleTokenAddresses[\"NCT\"]) return true;\n        return false;\n    }\n\n    /**\n     * @notice Return how much of the specified ERC20 token is required in\n     * order to swap for the desired amount of a Toucan pool token, for\n     * example, BCT or NCT.\n     *\n     * @param _fromToken The address of the ERC20 token used for the swap\n     * @param _toToken The address of the pool token to swap for,\n     * for example, NCT or BCT\n     * @param _toAmount The desired amount of pool token to receive\n     * @return amountsIn The amount of the ERC20 token required in order to\n     * swap for the specified amount of the pool token\n     */\n    function calculateNeededTokenAmount(\n        address _fromToken,\n        address _toToken,\n        uint256 _toAmount,\n        address[] memory _customPath\n    )\n        public\n        view\n        onlySwappable(_fromToken)\n        onlyRedeemable(_toToken)\n        returns (uint256)\n    {\n        (, uint256[] memory amounts) = calculateExactOutSwap(\n            _fromToken,\n            _toToken,\n            _toAmount,\n            _customPath\n        );\n        return amounts[0];\n    }\n\n    /**\n     * @notice Calculates the expected amount of Toucan Pool token that can be\n     * acquired by swapping the provided amount of ERC20 token.\n     *\n     * @param _fromToken The address of the ERC20 token used for the swap\n     * @param _fromAmount The amount of ERC20 token to swap\n     * @param _toToken The address of the pool token to swap for,\n     * for example, NCT or BCT\n     * @return The expected amount of Pool token that can be acquired\n     */\n    function calculateExpectedPoolTokenForToken(\n        address _fromToken,\n        uint256 _fromAmount,\n        address _toToken,\n        address[] memory _customPath\n    )\n        public\n        view\n        onlySwappable(_fromToken)\n        onlyRedeemable(_toToken)\n        returns (uint256)\n    {\n        (, uint256[] memory amounts) = calculateExactInSwap(\n            _fromToken,\n            _fromAmount,\n            _toToken,\n            _customPath\n        );\n        return amounts[amounts.length - 1];\n    }\n\n    /**\n     * @notice Swap eligible ERC20 tokens for Toucan pool tokens (BCT/NCT) on SushiSwap\n     * @dev Needs to be approved on the client side\n     * @param _fromToken The ERC20 oken to deposit and swap\n     * @param _toToken The token to swap for (will be held within contract)\n     * @param _toAmount The required amount of the Toucan pool token (NCT/BCT)\n     */\n    function swapExactOutToken(\n        address _fromToken,\n        address _toToken,\n        uint256 _toAmount,\n        address[] memory _customPath\n    ) public onlySwappable(_fromToken) onlyRedeemable(_toToken) {\n        // calculate path & amounts\n        (\n            address[] memory path,\n            uint256[] memory expAmounts\n        ) = calculateExactOutSwap(_fromToken, _toToken, _toAmount, _customPath);\n        uint256 amountIn = expAmounts[0];\n\n        // transfer tokens\n        IERC20(_fromToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amountIn\n        );\n\n        // approve router\n        IERC20(_fromToken).approve(dexRouterAddress, amountIn);\n\n        // swap\n        uint256[] memory amounts = dexRouter().swapTokensForExactTokens(\n            _toAmount,\n            amountIn, // max. input amount\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        // remove remaining approval if less input token was consumed\n        if (amounts[0] < amountIn) {\n            IERC20(_fromToken).approve(dexRouterAddress, 0);\n        }\n\n        // update balances\n        balances[msg.sender][_toToken] += _toAmount;\n    }\n\n    /**\n     * @notice Swap eligible ERC20 tokens for Toucan pool tokens (BCT/NCT) on\n     * SushiSwap. All provided ERC20 tokens will be swapped.\n     * @dev Needs to be approved on the client side.\n     * @param _fromToken The ERC20 token to deposit and swap\n     * @param _fromAmount The amount of ERC20 token to swap\n     * @param _toToken The Toucan token to swap for (will be held within contract)\n     * @return Resulting amount of Toucan pool token that got acquired for the\n     * swapped ERC20 tokens.\n     */\n    function swapExactInToken(\n        address _fromToken,\n        uint256 _fromAmount,\n        address _toToken,\n        address[] memory _customPath\n    )\n        public\n        onlySwappable(_fromToken)\n        onlyRedeemable(_toToken)\n        returns (uint256)\n    {\n        // calculate path & amounts\n        address[] memory path = generatePath(_fromToken, _toToken, _customPath);\n        uint256 len = path.length;\n\n        // transfer tokens\n        IERC20(_fromToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _fromAmount\n        );\n\n        // approve router\n        IERC20(_fromToken).safeApprove(dexRouterAddress, _fromAmount);\n\n        // swap\n        uint256[] memory amounts = dexRouter().swapExactTokensForTokens(\n            _fromAmount,\n            0, // min. output amount\n            path,\n            address(this),\n            block.timestamp\n        );\n        uint256 amountOut = amounts[len - 1];\n\n        // update balances\n        balances[msg.sender][_toToken] += amountOut;\n\n        return amountOut;\n    }\n\n    // apparently I need a fallback and a receive method to fix the situation where transfering dust native token e.g. CELO\n    // in the native token e.g. CELO to token swap fails\n    fallback() external payable {}\n\n    receive() external payable {}\n\n    /**\n     * @notice Return how much native token e.g. CELO is required in order to swap for the\n     * desired amount of a Toucan pool token, for example, BCT or NCT.\n     *\n     * @param _toToken The address of the pool token to swap for, for\n     * example, NCT or BCT\n     * @param _toAmount The desired amount of pool token to receive\n     * @return amounts The amount of native token e.g. CELO required in order to swap for\n     * the specified amount of the pool token\n     */\n    function calculateNeededETHAmount(\n        address _toToken,\n        uint256 _toAmount,\n        address[] memory _customPath\n    ) public view onlyRedeemable(_toToken) returns (uint256) {\n        address fromToken = eligibleTokenAddresses[baseERC20];\n        (, uint256[] memory amounts) = calculateExactOutSwap(\n            fromToken,\n            _toToken,\n            _toAmount,\n            _customPath\n        );\n        return amounts[0];\n    }\n\n    /**\n     * @notice Calculates the expected amount of Toucan Pool token that can be\n     * acquired by swapping the provided amount of native token e.g. CELO.\n     *\n     * @param _fromETHAmount The amount of native token e.g. CELO to swap\n     * @param _toToken The address of the pool token to swap for,\n     * for example, NCT or BCT\n     * @return The expected amount of Pool token that can be acquired\n     */\n    function calculateExpectedPoolTokenForETH(\n        uint256 _fromETHAmount,\n        address _toToken,\n        address[] memory _customPath\n    ) public view onlyRedeemable(_toToken) returns (uint256) {\n        address fromToken = eligibleTokenAddresses[baseERC20];\n        (, uint256[] memory amounts) = calculateExactInSwap(\n            fromToken,\n            _fromETHAmount,\n            _toToken,\n            _customPath\n        );\n        return amounts[amounts.length - 1];\n    }\n\n    /**\n     * @notice Swap the native token e.g. CELO for Toucan pool tokens (BCT/NCT) on SushiSwap.\n     * Remaining native token e.g. CELO that was not consumed by the swap is returned.\n     * @param _toToken Token to swap for (will be held within contract)\n     * @param _toAmount Amount of NCT / BCT wanted\n     */\n    function swapExactOutETH(\n        address _toToken,\n        uint256 _toAmount,\n        address[] memory _customPath\n    ) public payable onlyRedeemable(_toToken) {\n        // Custom `_customPath` logic only makes sense if the swap is multi-step\n        require(\n            _customPath.length == 0 || _customPath.length == 3,\n            \"Invalid custom path\"\n        );\n\n        if (_customPath.length == 3) {\n            require(\n                _customPath[0] == eligibleTokenAddresses[baseERC20],\n                \"Token should not be the default\"\n            );\n            require(isRedeemable(_customPath[2]), \"Token not redeemable\");\n        }\n\n        // calculate path & amounts\n        address fromToken = eligibleTokenAddresses[baseERC20];\n        address[] memory path = generatePath(fromToken, _toToken, _customPath);\n\n        // swap\n        uint256[] memory amounts = dexRouter().swapETHForExactTokens{\n            value: msg.value\n        }(_toAmount, path, address(this), block.timestamp);\n\n        // send surplus back\n        if (msg.value > amounts[0]) {\n            uint256 leftoverETH = msg.value - amounts[0];\n            (bool success, ) = msg.sender.call{value: leftoverETH}(\n                new bytes(0)\n            );\n\n            require(success, \"Failed to send surplus back\");\n        }\n\n        // update balances\n        balances[msg.sender][_toToken] += _toAmount;\n    }\n\n    /**\n     * @notice Swap the native token e.g. CELO for Toucan pool tokens (BCT/NCT) on SushiSwap. All\n     * provided native token e.g. CELO will be swapped.\n     * @param _toToken Token to swap for (will be held within contract)\n     * @return Resulting amount of Toucan pool token that got acquired for the\n     * swapped native token e.g. CELO.\n     */\n    function swapExactInETH(\n        address _toToken,\n        address[] memory _customPath\n    ) public payable onlyRedeemable(_toToken) returns (uint256) {\n        // Custom `_customPath` logic only makes sense if the swap is multi-step\n        require(\n            _customPath.length == 0 || _customPath.length == 3,\n            \"Invalid custom path\"\n        );\n\n        if (_customPath.length == 3) {\n            require(\n                _customPath[0] == eligibleTokenAddresses[baseERC20],\n                \"Token should not be the default token\"\n            );\n            require(isRedeemable(_customPath[2]), \"Token not redeemable\");\n        }\n\n        // calculate path & amounts\n        uint256 fromAmount = msg.value;\n        address fromToken = eligibleTokenAddresses[baseERC20];\n        address[] memory path = generatePath(fromToken, _toToken, _customPath);\n        uint256 len = path.length;\n\n        // swap\n        uint256[] memory amounts = dexRouter().swapExactETHForTokens{\n            value: fromAmount\n        }(0, path, address(this), block.timestamp);\n        uint256 amountOut = amounts[len - 1];\n\n        // update balances\n        balances[msg.sender][_toToken] += amountOut;\n\n        return amountOut;\n    }\n\n    /**\n     * @notice Allow users to withdraw tokens they have deposited.\n     */\n    function withdraw(address _erc20Addr, uint256 _amount) public {\n        require(\n            balances[msg.sender][_erc20Addr] >= _amount,\n            \"Insufficient balance\"\n        );\n\n        IERC20(_erc20Addr).safeTransfer(msg.sender, _amount);\n        balances[msg.sender][_erc20Addr] -= _amount;\n    }\n\n    /**\n     * @notice Allow users to deposit BCT / NCT.\n     * @dev Needs to be approved\n     */\n    function deposit(\n        address _erc20Addr,\n        uint256 _amount\n    ) public onlyRedeemable(_erc20Addr) {\n        IERC20(_erc20Addr).safeTransferFrom(msg.sender, address(this), _amount);\n        balances[msg.sender][_erc20Addr] += _amount;\n    }\n\n    /**\n     * @notice Redeems the specified amount of NCT / BCT for TCO2.\n     * @dev Needs to be approved on the client side\n     * @param _fromToken Could be the address of NCT or BCT\n     * @param _amount Amount to redeem\n     * @return tco2s An array of the TCO2 addresses that were redeemed\n     * @return amounts An array of the amounts of each TCO2 that were redeemed\n     */\n    function autoRedeem(\n        address _fromToken,\n        uint256 _amount\n    )\n        public\n        onlyRedeemable(_fromToken)\n        returns (address[] memory tco2s, uint256[] memory amounts)\n    {\n        require(\n            balances[msg.sender][_fromToken] >= _amount,\n            \"Insufficient NCT/BCT balance\"\n        );\n\n        // instantiate pool token (NCT or BCT)\n        IToucanPoolToken PoolTokenImplementation = IToucanPoolToken(_fromToken);\n\n        // auto redeem pool token for TCO2; will transfer automatically picked TCO2 to this contract\n        (tco2s, amounts) = PoolTokenImplementation.redeemAuto2(_amount);\n\n        // update balances\n        balances[msg.sender][_fromToken] -= _amount;\n        uint256 tco2sLen = tco2s.length;\n        for (uint256 index = 0; index < tco2sLen; index++) {\n            balances[msg.sender][tco2s[index]] += amounts[index];\n        }\n\n        emit Redeemed(msg.sender, _fromToken, tco2s, amounts);\n    }\n\n    /**\n     * @notice Retire the specified TCO2 tokens.\n     * @param _tco2s The addresses of the TCO2s to retire\n     * @param _amounts The amounts to retire from each of the corresponding\n     * TCO2 addresses\n     */\n    function autoRetire(\n        address[] memory _tco2s,\n        uint256[] memory _amounts\n    ) public {\n        uint256 tco2sLen = _tco2s.length;\n        require(tco2sLen != 0, \"Array empty\");\n\n        require(tco2sLen == _amounts.length, \"Arrays unequal\");\n\n        uint256 i = 0;\n        while (i < tco2sLen) {\n            if (_amounts[i] == 0) {\n                unchecked {\n                    i++;\n                }\n                continue;\n            }\n            require(\n                balances[msg.sender][_tco2s[i]] >= _amounts[i],\n                \"Insufficient TCO2 balance\"\n            );\n\n            balances[msg.sender][_tco2s[i]] -= _amounts[i];\n\n            IToucanCarbonOffsets(_tco2s[i]).retire(_amounts[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function calculateExactOutSwap(\n        address _fromToken,\n        address _toToken,\n        uint256 _toAmount,\n        address[] memory _customPath\n    ) internal view returns (address[] memory path, uint256[] memory amounts) {\n        path = generatePath(_fromToken, _toToken, _customPath);\n        uint256 len = path.length;\n\n        amounts = dexRouter().getAmountsIn(_toAmount, path);\n\n        // sanity check arrays\n        require(len == amounts.length, \"Arrays unequal\");\n        require(_toAmount == amounts[len - 1], \"Output amount mismatch\");\n    }\n\n    function calculateExactInSwap(\n        address _fromToken,\n        uint256 _fromAmount,\n        address _toToken,\n        address[] memory _customPath\n    ) internal view returns (address[] memory path, uint256[] memory amounts) {\n        path = generatePath(_fromToken, _toToken, _customPath);\n        uint256 len = path.length;\n\n        amounts = dexRouter().getAmountsOut(_fromAmount, path);\n\n        // sanity check arrays\n        require(len == amounts.length, \"Arrays unequal\");\n        require(_fromAmount == amounts[0], \"Input amount mismatch\");\n    }\n\n    function generatePath(\n        address _fromToken,\n        address _toToken,\n        address[] memory _customPath\n    ) internal view returns (address[] memory) {\n        if (_customPath.length > 1) {\n            return _customPath;\n        } else {\n            if (_fromToken == eligibleTokenAddresses[baseToken]) {\n                address[] memory path = new address[](2);\n                path[0] = _fromToken;\n                path[1] = _toToken;\n                return path;\n            } else {\n                address[] memory path = new address[](3);\n                path[0] = _fromToken;\n                path[1] = eligibleTokenAddresses[baseToken];\n                path[2] = _toToken;\n                return path;\n            }\n        }\n    }\n\n    function dexRouter() internal view returns (IUniswapV2Router02) {\n        return IUniswapV2Router02(dexRouterAddress);\n    }\n\n    // ----------------------------------------\n    //  Admin methods\n    // ----------------------------------------\n\n    /**\n     * @notice Change or add eligible tokens and their addresses.\n     * @param _tokenSymbol The symbol of the token to add\n     * @param _address The address of the token to add\n     */\n    function setEligibleTokenAddress(\n        string memory _tokenSymbol,\n        address _address\n    ) public virtual onlyOwner {\n        eligibleTokenAddresses[_tokenSymbol] = _address;\n    }\n\n    /**\n     * @notice Delete eligible tokens stored in the contract.\n     * @param _tokenSymbol The symbol of the token to remove\n     */\n    function deleteEligibleTokenAddress(\n        string memory _tokenSymbol\n    ) public virtual onlyOwner {\n        delete eligibleTokenAddresses[_tokenSymbol];\n    }\n\n    /**\n     * @notice Change the TCO2 contracts registry.\n     * @param _address The address of the Toucan contract registry to use\n     */\n    function setToucanContractRegistry(\n        address _address\n    ) public virtual onlyOwner {\n        contractRegistryAddress = _address;\n    }\n}\n"
    },
    "contracts/OffsetHelperStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract OffsetHelperStorage is OwnableUpgradeable {\n    // token symbol => token address\n    mapping(string => address) public eligibleTokenAddresses;\n    address public contractRegistryAddress =\n        // 0x48E04110aa4691ec3E9493187e6e9A3dB613e6e4; // Alfajores\n        0xa30589F50b9641dacCB98AA2B4A8F24739c5B007; // Celo\n    address public dexRouterAddress =\n        0x7D28570135A2B1930F331c507F65039D4937f66c; // Ubeswap\n    // 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506 // SushiSwap\n    // user => (token => amount)\n    mapping(address => mapping(address => uint256)) public balances;\n    string public baseToken; // token that the exchange uses to swap to pool tokens e.g., NCTs\n    string public baseERC20; // token to get needed ERC20 amountto swap\n}\n"
    },
    "contracts/types/CarbonProjectTypes.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity >=0.8.4 <0.9.0;\n\n/// @dev CarbonProject related data and attributes\nstruct ProjectData {\n    string projectId;\n    string standard;\n    string methodology;\n    string region;\n    string storageMethod;\n    string method;\n    string emissionType;\n    string category;\n    string uri;\n    address controller;\n}\n"
    },
    "contracts/types/CarbonProjectVintageTypes.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity >=0.8.4 <0.9.0;\n\nstruct VintageData {\n    /// @dev A human-readable string which differentiates this from other vintages in\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\n    string name;\n    uint64 startTime; // UNIX timestamp\n    uint64 endTime; // UNIX timestamp\n    uint256 projectTokenId;\n    uint64 totalVintageQuantity;\n    bool isCorsiaCompliant;\n    bool isCCPcompliant;\n    string coBenefits;\n    string correspAdjustment;\n    string additionalCertification;\n    string uri;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}